{"version":3,"sources":["Components/InputField.jsx","Components/BuildingBlock/BuilingBlockComponents/TopBlock.jsx","Components/BuildingBlock/BuilingBlockComponents/GroundBlock.jsx","Components/BuildingBlock/BuilingBlockComponents/MiddleBlock.jsx","Components/BuildingBlock/BuildingBlock.jsx","App.js","serviceWorker.js","index.js"],"names":["InputField","props","type","defaultValue","id","onClick","submit","TopBlock","className","GroundBlock","MiddleBlock","Buildingblock","Array","from","floorNum","keys","map","item","App","handleSubmit","event","isNaN","parseInt","document","getElementById","value","alert","setState","porchNum","console","log","state","this","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAYeA,MAVf,SAAoBC,GAChB,OACI,6BACI,2BAAOC,KAAK,OAAOC,aAAa,mBAAmBC,GAAG,aACtD,2BAAOF,KAAK,OAAOC,aAAa,kBAAkBC,GAAG,aACrD,2BAAOF,KAAK,SAASC,aAAa,6BAA6BE,QAASJ,EAAMK,WCG3EC,MARf,WACI,OACI,yBAAKC,UAAU,cCMRC,MARf,WACI,OACI,yBAAKD,UAAU,eACb,yBAAKA,UAAU,WCKVE,MARf,WACI,OACI,yBAAKF,UAAU,eACZ,yBAAKA,UAAU,a,MCWXG,MAVf,SAAuBV,GACnB,OACA,yBAAKO,UAAU,iBACX,kBAAC,EAAD,MACHI,MAAMC,KAAKD,MAAMX,EAAMa,UAAUC,QAAQC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,SAClD,kBAAC,EAAD,QCyBOC,G,wDA9Bb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAMRkB,aAAe,SAACC,GACTC,MAAMC,SAASC,SAASC,eAAe,YAAYC,SAAYJ,MAAMC,SAASC,SAASC,eAAe,YAAYC,QAMlHC,MAAM,6BALT,EAAKC,SAAS,CACZC,SAAUL,SAASC,eAAe,YAAYC,MAC9CX,SAAUS,SAASC,eAAe,YAAYC,QAIlDI,QAAQC,IAAI,EAAKC,QAbjB,EAAKA,MAAQ,CACXH,SAAU,EACVd,SAAU,GAJK,E,qDAiBT,IAAD,OACP,OACE,yBAAKN,UAAU,eACb,kBAAC,EAAD,CAAYF,OAAQ0B,KAAKb,eAEzB,yBAAKX,UAAU,YACZI,MAAMC,KAAKD,MAAMU,SAASU,KAAKD,MAAMH,WAAWb,QAAQC,KAAI,SAAAC,GAAI,OAAI,yBAAKgB,IAAKhB,GAAM,kBAAC,EAAD,CAAeH,SAAUQ,SAAS,EAAKS,MAAMjB,sB,GAxB1HoB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASC,eAAe,SD6H3C,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.c1fbe82b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction InputField(props) {\r\n    return (\r\n        <div>\r\n            <input type='text' defaultValue='how many porches' id='porchNum'  />\r\n            <input type='text' defaultValue='how many floors' id='floorNum' />\r\n            <input type='submit' defaultValue='Submit building parameters' onClick={props.submit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputField\r\n\r\n","import React from 'react'\r\n\r\nfunction TopBlock() {\r\n    return (\r\n        <div className='topBlock'>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopBlock\r\n\r\n","import React from 'react'\r\n\r\nfunction GroundBlock() {\r\n    return (\r\n        <div className='groundBlock'>\r\n          <div className='door'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroundBlock\r\n\r\n","import React from 'react'\r\n\r\nfunction MiddleBlock() {\r\n    return (\r\n        <div className='middleBlock'>\r\n           <div className='window'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MiddleBlock\r\n\r\n","import React from 'react'\r\nimport TopBlock from './BuilingBlockComponents/TopBlock'\r\nimport GroundBlock from './BuilingBlockComponents/GroundBlock'\r\nimport MiddleBlock from './BuilingBlockComponents/MiddleBlock'\r\nimport './BuildingBlock.css'\r\n\r\nfunction Buildingblock(props) {\r\n    return (\r\n    <div className='BuildingBlock'>\r\n        <TopBlock />\r\n    {Array.from(Array(props.floorNum).keys()).map(item => <MiddleBlock />)}\r\n        <GroundBlock />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Buildingblock\r\n\r\n\r\n","import React from 'react';\nimport InputField from './Components/InputField'\nimport BuildingBlock from './Components/BuildingBlock/BuildingBlock'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      porchNum: 0,\n      floorNum: 0,\n    }\n  }\n  handleSubmit = (event) => {\n    if (!isNaN(parseInt(document.getElementById('porchNum').value)) && !isNaN(parseInt(document.getElementById('floorNum').value))) {\n      this.setState({\n        porchNum: document.getElementById('porchNum').value,\n        floorNum: document.getElementById('floorNum').value,\n      })\n    }\n    else alert('pls enter a valid numbers')\n    console.log(this.state)\n  }\n  render() {\n    return (\n      <div className='constructor'>\n        <InputField submit={this.handleSubmit} />\n        {/*<BuildingBlock floorNum={parseInt(this.state.floorNum)} />*/}\n        <div className='building'>\n          {Array.from(Array(parseInt(this.state.porchNum)).keys()).map(item => <div key={item}><BuildingBlock floorNum={parseInt(this.state.floorNum)} /></div>)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}